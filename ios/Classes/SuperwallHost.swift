// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum PFeatureGatingBehavior: Int {
  case gated = 0
  case nonGated = 1
}

enum PPaywallCloseReason: Int {
  /// The paywall was closed by system logic, either after a purchase, because
  /// a deeplink was presented, close button pressed, etc.
  case systemLogic = 0
  /// The paywall was automatically closed because another paywall will show.
  ///
  /// This prevents ``Superwall/register(placement:params:handler:feature:)`` `feature`
  /// block from executing on dismiss of the paywall, because another paywall is set to show
  case forNextPaywall = 1
  /// The paywall was closed because the webview couldn't be loaded.
  ///
  /// If this happens for a gated paywall, the ``PaywallPresentationHandler/onError(_:)``
  /// handler will be called. If it's for a non-gated paywall, the feature block will be called.
  case webViewFailedToLoad = 2
  /// The paywall was closed because the user tapped the close button or dragged to dismiss.
  case manualClose = 3
  /// The paywall hasn't been closed yet.
  case none = 4
}

enum PLocalNotificationType: Int {
  case trialStarted = 0
  case unsupported = 1
}

enum PComputedPropertyRequestType: Int {
  case minutesSince = 0
  case hoursSince = 1
  case daysSince = 2
  case monthsSince = 3
  case yearsSince = 4
}

enum PSurveyShowCondition: Int {
  case onManualClose = 0
  case onPurchase = 1
}

enum PNetworkEnvironment: Int {
  case release = 0
  case releaseCandidate = 1
  case developer = 2
}

enum PLogLevel: Int {
  case debug = 0
  case info = 1
  case warn = 2
  case error = 3
  case none = 4
}

enum PTransactionBackgroundView: Int {
  case spinner = 0
  case none = 1
}

enum PLogScope: Int {
  case localizationManager = 0
  case bounceButton = 1
  case coreData = 2
  case configManager = 3
  case identityManager = 4
  case debugManager = 5
  case debugViewController = 6
  case localizationViewController = 7
  case gameControllerManager = 8
  case device = 9
  case network = 10
  case paywallEvents = 11
  case productsManager = 12
  case storeKitManager = 13
  case placements = 14
  case receipts = 15
  case superwallCore = 16
  case paywallPresentation = 17
  case transactions = 18
  case paywallViewController = 19
  case cache = 20
  case all = 21
}

enum PConfigurationStatus: Int {
  case pending = 0
  case configured = 1
  case failed = 2
}

enum PEventType: Int {
  case firstSeen = 0
  case appOpen = 1
  case appLaunch = 2
  case identityAlias = 3
  case appInstall = 4
  case restoreStart = 5
  case restoreComplete = 6
  case restoreFail = 7
  case sessionStart = 8
  case deviceAttributes = 9
  case subscriptionStatusDidChange = 10
  case appClose = 11
  case deepLink = 12
  case triggerFire = 13
  case paywallOpen = 14
  case paywallClose = 15
  case paywallDecline = 16
  case transactionStart = 17
  case transactionFail = 18
  case transactionAbandon = 19
  case transactionComplete = 20
  case subscriptionStart = 21
  case freeTrialStart = 22
  case transactionRestore = 23
  case transactionTimeout = 24
  case userAttributes = 25
  case nonRecurringProductPurchase = 26
  case paywallResponseLoadStart = 27
  case paywallResponseLoadNotFound = 28
  case paywallResponseLoadFail = 29
  case paywallResponseLoadComplete = 30
  case paywallWebviewLoadStart = 31
  case paywallWebviewLoadFail = 32
  case paywallWebviewLoadComplete = 33
  case paywallWebviewLoadTimeout = 34
  case paywallWebviewLoadFallback = 35
  case paywallProductsLoadRetry = 36
  case paywallProductsLoadStart = 37
  case paywallProductsLoadFail = 38
  case paywallProductsLoadComplete = 39
  case paywallResourceLoadFail = 40
  case surveyResponse = 41
  case paywallPresentationRequest = 42
  case touchesBegan = 43
  case surveyClose = 44
  case reset = 45
  case configRefresh = 46
  case customPlacement = 47
  case configAttributes = 48
  case confirmAllAssignments = 49
  case configFail = 50
  case adServicesTokenRequestStart = 51
  case adServicesTokenRequestFail = 52
  case adServicesTokenRequestComplete = 53
  case shimmerViewStart = 54
  case shimmerViewComplete = 55
}

enum PSubscriptionStatusType: Int {
  case active = 0
  case inactive = 1
  case unknown = 2
}

enum PPaywallPresentationRequestStatusType: Int {
  case presentation = 0
  case noPresentation = 1
  case timeout = 2
}

enum PPaywallPresentationRequestStatusReason: Int {
  case debuggerPresented = 0
  case paywallAlreadyPresented = 1
  case holdout = 2
  case noAudienceMatch = 3
  case placementNotFound = 4
  case noPaywallViewController = 5
  case noPresenter = 6
  case noConfig = 7
  case subscriptionStatusTimeout = 8
}

enum PVariantType: Int {
  case treatment = 0
  case holdout = 1
}

enum PPaywallSkippedReason: Int {
  case holdout = 0
  case noAudienceMatch = 1
  case placementNotFound = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct PSuperwallOptions {
  var paywalls: PPaywallOptions? = nil
  var networkEnvironment: PNetworkEnvironment? = nil
  var isExternalDataCollectionEnabled: Bool? = nil
  var localeIdentifier: String? = nil
  var isGameControllerEnabled: Bool? = nil
  var logging: PLogging? = nil
  var passIdentifiersToPlayStore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PSuperwallOptions? {
    let paywalls: PPaywallOptions? = nilOrValue(pigeonVar_list[0])
    let networkEnvironment: PNetworkEnvironment? = nilOrValue(pigeonVar_list[1])
    let isExternalDataCollectionEnabled: Bool? = nilOrValue(pigeonVar_list[2])
    let localeIdentifier: String? = nilOrValue(pigeonVar_list[3])
    let isGameControllerEnabled: Bool? = nilOrValue(pigeonVar_list[4])
    let logging: PLogging? = nilOrValue(pigeonVar_list[5])
    let passIdentifiersToPlayStore: Bool? = nilOrValue(pigeonVar_list[6])

    return PSuperwallOptions(
      paywalls: paywalls,
      networkEnvironment: networkEnvironment,
      isExternalDataCollectionEnabled: isExternalDataCollectionEnabled,
      localeIdentifier: localeIdentifier,
      isGameControllerEnabled: isGameControllerEnabled,
      logging: logging,
      passIdentifiersToPlayStore: passIdentifiersToPlayStore
    )
  }
  func toList() -> [Any?] {
    return [
      paywalls,
      networkEnvironment,
      isExternalDataCollectionEnabled,
      localeIdentifier,
      isGameControllerEnabled,
      logging,
      passIdentifiersToPlayStore,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallInfo {
  var identifier: String? = nil
  var name: String? = nil
  var experiment: PExperiment? = nil
  var productIds: [String]? = nil
  var products: [PProduct]? = nil
  var url: String? = nil
  var presentedByPlacementWithName: String? = nil
  var presentedByPlacementWithId: String? = nil
  var presentedByPlacementAt: String? = nil
  var presentedBy: String? = nil
  var presentationSourceType: String? = nil
  var responseLoadStartTime: String? = nil
  var responseLoadCompleteTime: String? = nil
  var responseLoadFailTime: String? = nil
  var responseLoadDuration: Double? = nil
  var webViewLoadStartTime: String? = nil
  var webViewLoadCompleteTime: String? = nil
  var webViewLoadFailTime: String? = nil
  var webViewLoadDuration: Double? = nil
  var productsLoadStartTime: String? = nil
  var productsLoadCompleteTime: String? = nil
  var productsLoadFailTime: String? = nil
  var productsLoadDuration: Double? = nil
  var paywalljsVersion: String? = nil
  var isFreeTrialAvailable: Bool? = nil
  var featureGatingBehavior: PFeatureGatingBehavior? = nil
  var closeReason: PPaywallCloseReason? = nil
  var localNotifications: [PLocalNotification]? = nil
  var computedPropertyRequests: [PComputedPropertyRequest]? = nil
  var surveys: [PSurvey]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallInfo? {
    let identifier: String? = nilOrValue(pigeonVar_list[0])
    let name: String? = nilOrValue(pigeonVar_list[1])
    let experiment: PExperiment? = nilOrValue(pigeonVar_list[2])
    let productIds: [String]? = nilOrValue(pigeonVar_list[3])
    let products: [PProduct]? = nilOrValue(pigeonVar_list[4])
    let url: String? = nilOrValue(pigeonVar_list[5])
    let presentedByPlacementWithName: String? = nilOrValue(pigeonVar_list[6])
    let presentedByPlacementWithId: String? = nilOrValue(pigeonVar_list[7])
    let presentedByPlacementAt: String? = nilOrValue(pigeonVar_list[8])
    let presentedBy: String? = nilOrValue(pigeonVar_list[9])
    let presentationSourceType: String? = nilOrValue(pigeonVar_list[10])
    let responseLoadStartTime: String? = nilOrValue(pigeonVar_list[11])
    let responseLoadCompleteTime: String? = nilOrValue(pigeonVar_list[12])
    let responseLoadFailTime: String? = nilOrValue(pigeonVar_list[13])
    let responseLoadDuration: Double? = nilOrValue(pigeonVar_list[14])
    let webViewLoadStartTime: String? = nilOrValue(pigeonVar_list[15])
    let webViewLoadCompleteTime: String? = nilOrValue(pigeonVar_list[16])
    let webViewLoadFailTime: String? = nilOrValue(pigeonVar_list[17])
    let webViewLoadDuration: Double? = nilOrValue(pigeonVar_list[18])
    let productsLoadStartTime: String? = nilOrValue(pigeonVar_list[19])
    let productsLoadCompleteTime: String? = nilOrValue(pigeonVar_list[20])
    let productsLoadFailTime: String? = nilOrValue(pigeonVar_list[21])
    let productsLoadDuration: Double? = nilOrValue(pigeonVar_list[22])
    let paywalljsVersion: String? = nilOrValue(pigeonVar_list[23])
    let isFreeTrialAvailable: Bool? = nilOrValue(pigeonVar_list[24])
    let featureGatingBehavior: PFeatureGatingBehavior? = nilOrValue(pigeonVar_list[25])
    let closeReason: PPaywallCloseReason? = nilOrValue(pigeonVar_list[26])
    let localNotifications: [PLocalNotification]? = nilOrValue(pigeonVar_list[27])
    let computedPropertyRequests: [PComputedPropertyRequest]? = nilOrValue(pigeonVar_list[28])
    let surveys: [PSurvey]? = nilOrValue(pigeonVar_list[29])

    return PPaywallInfo(
      identifier: identifier,
      name: name,
      experiment: experiment,
      productIds: productIds,
      products: products,
      url: url,
      presentedByPlacementWithName: presentedByPlacementWithName,
      presentedByPlacementWithId: presentedByPlacementWithId,
      presentedByPlacementAt: presentedByPlacementAt,
      presentedBy: presentedBy,
      presentationSourceType: presentationSourceType,
      responseLoadStartTime: responseLoadStartTime,
      responseLoadCompleteTime: responseLoadCompleteTime,
      responseLoadFailTime: responseLoadFailTime,
      responseLoadDuration: responseLoadDuration,
      webViewLoadStartTime: webViewLoadStartTime,
      webViewLoadCompleteTime: webViewLoadCompleteTime,
      webViewLoadFailTime: webViewLoadFailTime,
      webViewLoadDuration: webViewLoadDuration,
      productsLoadStartTime: productsLoadStartTime,
      productsLoadCompleteTime: productsLoadCompleteTime,
      productsLoadFailTime: productsLoadFailTime,
      productsLoadDuration: productsLoadDuration,
      paywalljsVersion: paywalljsVersion,
      isFreeTrialAvailable: isFreeTrialAvailable,
      featureGatingBehavior: featureGatingBehavior,
      closeReason: closeReason,
      localNotifications: localNotifications,
      computedPropertyRequests: computedPropertyRequests,
      surveys: surveys
    )
  }
  func toList() -> [Any?] {
    return [
      identifier,
      name,
      experiment,
      productIds,
      products,
      url,
      presentedByPlacementWithName,
      presentedByPlacementWithId,
      presentedByPlacementAt,
      presentedBy,
      presentationSourceType,
      responseLoadStartTime,
      responseLoadCompleteTime,
      responseLoadFailTime,
      responseLoadDuration,
      webViewLoadStartTime,
      webViewLoadCompleteTime,
      webViewLoadFailTime,
      webViewLoadDuration,
      productsLoadStartTime,
      productsLoadCompleteTime,
      productsLoadFailTime,
      productsLoadDuration,
      paywalljsVersion,
      isFreeTrialAvailable,
      featureGatingBehavior,
      closeReason,
      localNotifications,
      computedPropertyRequests,
      surveys,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PProduct {
  var id: String? = nil
  var name: String? = nil
  var entitlements: [PEntitlement]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PProduct? {
    let id: String? = nilOrValue(pigeonVar_list[0])
    let name: String? = nilOrValue(pigeonVar_list[1])
    let entitlements: [PEntitlement]? = nilOrValue(pigeonVar_list[2])

    return PProduct(
      id: id,
      name: name,
      entitlements: entitlements
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      entitlements,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PLocalNotification {
  var id: Int64
  var type: PLocalNotificationType
  var title: String
  var subtitle: String? = nil
  var body: String
  var delay: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PLocalNotification? {
    let id = pigeonVar_list[0] as! Int64
    let type = pigeonVar_list[1] as! PLocalNotificationType
    let title = pigeonVar_list[2] as! String
    let subtitle: String? = nilOrValue(pigeonVar_list[3])
    let body = pigeonVar_list[4] as! String
    let delay = pigeonVar_list[5] as! Int64

    return PLocalNotification(
      id: id,
      type: type,
      title: title,
      subtitle: subtitle,
      body: body,
      delay: delay
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      type,
      title,
      subtitle,
      body,
      delay,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PComputedPropertyRequest {
  var type: PComputedPropertyRequestType
  var eventName: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PComputedPropertyRequest? {
    let type = pigeonVar_list[0] as! PComputedPropertyRequestType
    let eventName = pigeonVar_list[1] as! String

    return PComputedPropertyRequest(
      type: type,
      eventName: eventName
    )
  }
  func toList() -> [Any?] {
    return [
      type,
      eventName,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PSurvey {
  var id: String
  var assignmentKey: String
  var title: String
  var message: String
  var options: [PSurveyOption]
  var presentationCondition: PSurveyShowCondition
  var presentationProbability: Double
  var includeOtherOption: Bool
  var includeCloseOption: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PSurvey? {
    let id = pigeonVar_list[0] as! String
    let assignmentKey = pigeonVar_list[1] as! String
    let title = pigeonVar_list[2] as! String
    let message = pigeonVar_list[3] as! String
    let options = pigeonVar_list[4] as! [PSurveyOption]
    let presentationCondition = pigeonVar_list[5] as! PSurveyShowCondition
    let presentationProbability = pigeonVar_list[6] as! Double
    let includeOtherOption = pigeonVar_list[7] as! Bool
    let includeCloseOption = pigeonVar_list[8] as! Bool

    return PSurvey(
      id: id,
      assignmentKey: assignmentKey,
      title: title,
      message: message,
      options: options,
      presentationCondition: presentationCondition,
      presentationProbability: presentationProbability,
      includeOtherOption: includeOtherOption,
      includeCloseOption: includeCloseOption
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      assignmentKey,
      title,
      message,
      options,
      presentationCondition,
      presentationProbability,
      includeOtherOption,
      includeCloseOption,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PSurveyOption {
  var id: String? = nil
  var text: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PSurveyOption? {
    let id: String? = nilOrValue(pigeonVar_list[0])
    let text: String? = nilOrValue(pigeonVar_list[1])

    return PSurveyOption(
      id: id,
      text: text
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      text,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PPurchaseResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchaseCancelled: PPurchaseResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchaseCancelled? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPurchaseCancelled(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchasePurchased: PPurchaseResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchasePurchased? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPurchasePurchased(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchasePending: PPurchaseResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchasePending? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPurchasePending(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchaseFailed: PPurchaseResult {
  var error: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchaseFailed? {
    let error: String? = nilOrValue(pigeonVar_list[0])

    return PPurchaseFailed(
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      error
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PRestorationResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PRestorationRestored: PRestorationResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRestorationRestored? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PRestorationRestored(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PRestorationFailed: PRestorationResult {
  var error: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRestorationFailed? {
    let error: String? = nilOrValue(pigeonVar_list[0])

    return PRestorationFailed(
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      error
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PRestoreFailed {
  var title: String? = nil
  var message: String? = nil
  var closeButtonTitle: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRestoreFailed? {
    let title: String? = nilOrValue(pigeonVar_list[0])
    let message: String? = nilOrValue(pigeonVar_list[1])
    let closeButtonTitle: String? = nilOrValue(pigeonVar_list[2])

    return PRestoreFailed(
      title: title,
      message: message,
      closeButtonTitle: closeButtonTitle
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      message,
      closeButtonTitle,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PLogging {
  var level: PLogLevel? = nil
  var scopes: [PLogScope]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PLogging? {
    let level: PLogLevel? = nilOrValue(pigeonVar_list[0])
    let scopes: [PLogScope]? = nilOrValue(pigeonVar_list[1])

    return PLogging(
      level: level,
      scopes: scopes
    )
  }
  func toList() -> [Any?] {
    return [
      level,
      scopes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallOptions {
  var isHapticFeedbackEnabled: Bool? = nil
  var restoreFailed: PRestoreFailed? = nil
  var shouldShowPurchaseFailureAlert: Bool? = nil
  var shouldPreload: Bool? = nil
  var automaticallyDismiss: Bool? = nil
  var transactionBackgroundView: PTransactionBackgroundView? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallOptions? {
    let isHapticFeedbackEnabled: Bool? = nilOrValue(pigeonVar_list[0])
    let restoreFailed: PRestoreFailed? = nilOrValue(pigeonVar_list[1])
    let shouldShowPurchaseFailureAlert: Bool? = nilOrValue(pigeonVar_list[2])
    let shouldPreload: Bool? = nilOrValue(pigeonVar_list[3])
    let automaticallyDismiss: Bool? = nilOrValue(pigeonVar_list[4])
    let transactionBackgroundView: PTransactionBackgroundView? = nilOrValue(pigeonVar_list[5])

    return PPaywallOptions(
      isHapticFeedbackEnabled: isHapticFeedbackEnabled,
      restoreFailed: restoreFailed,
      shouldShowPurchaseFailureAlert: shouldShowPurchaseFailureAlert,
      shouldPreload: shouldPreload,
      automaticallyDismiss: automaticallyDismiss,
      transactionBackgroundView: transactionBackgroundView
    )
  }
  func toList() -> [Any?] {
    return [
      isHapticFeedbackEnabled,
      restoreFailed,
      shouldShowPurchaseFailureAlert,
      shouldPreload,
      automaticallyDismiss,
      transactionBackgroundView,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchaseControllerHost {
  var hostId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchaseControllerHost? {
    let hostId: String? = nilOrValue(pigeonVar_list[0])

    return PPurchaseControllerHost(
      hostId: hostId
    )
  }
  func toList() -> [Any?] {
    return [
      hostId
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PConfigureCompletionHost {
  var hostId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PConfigureCompletionHost? {
    let hostId: String? = nilOrValue(pigeonVar_list[0])

    return PConfigureCompletionHost(
      hostId: hostId
    )
  }
  func toList() -> [Any?] {
    return [
      hostId
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallPresentationHandlerHost {
  var hostId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallPresentationHandlerHost? {
    let hostId: String? = nilOrValue(pigeonVar_list[0])

    return PPaywallPresentationHandlerHost(
      hostId: hostId
    )
  }
  func toList() -> [Any?] {
    return [
      hostId
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PFeatureHandlerHost {
  var hostId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PFeatureHandlerHost? {
    let hostId: String? = nilOrValue(pigeonVar_list[0])

    return PFeatureHandlerHost(
      hostId: hostId
    )
  }
  func toList() -> [Any?] {
    return [
      hostId
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PEntitlement {
  var id: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PEntitlement? {
    let id: String? = nilOrValue(pigeonVar_list[0])

    return PEntitlement(
      id: id
    )
  }
  func toList() -> [Any?] {
    return [
      id
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PSubscriptionStatus {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PActive: PSubscriptionStatus {
  var entitlements: [PEntitlement]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PActive? {
    let entitlements = pigeonVar_list[0] as! [PEntitlement]

    return PActive(
      entitlements: entitlements
    )
  }
  func toList() -> [Any?] {
    return [
      entitlements
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PInactive: PSubscriptionStatus {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PInactive? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PInactive(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PUnknown: PSubscriptionStatus {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PUnknown? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PUnknown(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PSuperwallEventInfoPigeon {
  var eventType: PEventType
  var params: [String: Any]? = nil
  var paywallInfoBridgeId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PSuperwallEventInfoPigeon? {
    let eventType = pigeonVar_list[0] as! PEventType
    let params: [String: Any]? = nilOrValue(pigeonVar_list[1])
    let paywallInfoBridgeId: String? = nilOrValue(pigeonVar_list[2])

    return PSuperwallEventInfoPigeon(
      eventType: eventType,
      params: params,
      paywallInfoBridgeId: paywallInfoBridgeId
    )
  }
  func toList() -> [Any?] {
    return [
      eventType,
      params,
      paywallInfoBridgeId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PIdentityOptions {
  var restorePaywallAssignments: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PIdentityOptions? {
    let restorePaywallAssignments: Bool? = nilOrValue(pigeonVar_list[0])

    return PIdentityOptions(
      restorePaywallAssignments: restorePaywallAssignments
    )
  }
  func toList() -> [Any?] {
    return [
      restorePaywallAssignments
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PExperiment {
  var id: String
  var groupId: String
  var variant: PVariant


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PExperiment? {
    let id = pigeonVar_list[0] as! String
    let groupId = pigeonVar_list[1] as! String
    let variant = pigeonVar_list[2] as! PVariant

    return PExperiment(
      id: id,
      groupId: groupId,
      variant: variant
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      groupId,
      variant,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PTriggerResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PPlacementNotFoundTriggerResult: PTriggerResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPlacementNotFoundTriggerResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PPlacementNotFoundTriggerResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PNoAudienceMatchTriggerResult: PTriggerResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PNoAudienceMatchTriggerResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PNoAudienceMatchTriggerResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PPaywallTriggerResult: PTriggerResult {
  var experiment: PExperiment


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPaywallTriggerResult? {
    let experiment = pigeonVar_list[0] as! PExperiment

    return PPaywallTriggerResult(
      experiment: experiment
    )
  }
  func toList() -> [Any?] {
    return [
      experiment
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PHoldoutTriggerResult: PTriggerResult {
  var experiment: PExperiment


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PHoldoutTriggerResult? {
    let experiment = pigeonVar_list[0] as! PExperiment

    return PHoldoutTriggerResult(
      experiment: experiment
    )
  }
  func toList() -> [Any?] {
    return [
      experiment
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PErrorTriggerResult: PTriggerResult {
  var error: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PErrorTriggerResult? {
    let error = pigeonVar_list[0] as! String

    return PErrorTriggerResult(
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      error
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PVariant {
  var id: String
  var type: PVariantType
  var paywallId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PVariant? {
    let id = pigeonVar_list[0] as! String
    let type = pigeonVar_list[1] as! PVariantType
    let paywallId: String? = nilOrValue(pigeonVar_list[2])

    return PVariant(
      id: id,
      type: type,
      paywallId: paywallId
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      type,
      paywallId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PConfirmedAssignment {
  var experimentId: String
  var variant: PVariant


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PConfirmedAssignment? {
    let experimentId = pigeonVar_list[0] as! String
    let variant = pigeonVar_list[1] as! PVariant

    return PConfirmedAssignment(
      experimentId: experimentId,
      variant: variant
    )
  }
  func toList() -> [Any?] {
    return [
      experimentId,
      variant,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol PPaywallResult {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PPurchasedPaywallResult: PPaywallResult {
  var productId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PPurchasedPaywallResult? {
    let productId = pigeonVar_list[0] as! String

    return PPurchasedPaywallResult(
      productId: productId
    )
  }
  func toList() -> [Any?] {
    return [
      productId
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PDeclinedPaywallResult: PPaywallResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PDeclinedPaywallResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PDeclinedPaywallResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PRestoredPaywallResult: PPaywallResult {
  var ignore: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PRestoredPaywallResult? {
    let ignore: Bool? = nilOrValue(pigeonVar_list[0])

    return PRestoredPaywallResult(
      ignore: ignore
    )
  }
  func toList() -> [Any?] {
    return [
      ignore
    ]
  }
}

private class SuperwallHostPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PFeatureGatingBehavior(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PPaywallCloseReason(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PLocalNotificationType(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PComputedPropertyRequestType(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PSurveyShowCondition(rawValue: enumResultAsInt)
      }
      return nil
    case 134:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PNetworkEnvironment(rawValue: enumResultAsInt)
      }
      return nil
    case 135:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PLogLevel(rawValue: enumResultAsInt)
      }
      return nil
    case 136:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PTransactionBackgroundView(rawValue: enumResultAsInt)
      }
      return nil
    case 137:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PLogScope(rawValue: enumResultAsInt)
      }
      return nil
    case 138:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PConfigurationStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 139:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PEventType(rawValue: enumResultAsInt)
      }
      return nil
    case 140:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PSubscriptionStatusType(rawValue: enumResultAsInt)
      }
      return nil
    case 141:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PPaywallPresentationRequestStatusType(rawValue: enumResultAsInt)
      }
      return nil
    case 142:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PPaywallPresentationRequestStatusReason(rawValue: enumResultAsInt)
      }
      return nil
    case 143:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PVariantType(rawValue: enumResultAsInt)
      }
      return nil
    case 144:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PPaywallSkippedReason(rawValue: enumResultAsInt)
      }
      return nil
    case 145:
      return PSuperwallOptions.fromList(self.readValue() as! [Any?])
    case 146:
      return PPaywallInfo.fromList(self.readValue() as! [Any?])
    case 147:
      return PProduct.fromList(self.readValue() as! [Any?])
    case 148:
      return PLocalNotification.fromList(self.readValue() as! [Any?])
    case 149:
      return PComputedPropertyRequest.fromList(self.readValue() as! [Any?])
    case 150:
      return PSurvey.fromList(self.readValue() as! [Any?])
    case 151:
      return PSurveyOption.fromList(self.readValue() as! [Any?])
    case 152:
      return PPurchaseCancelled.fromList(self.readValue() as! [Any?])
    case 153:
      return PPurchasePurchased.fromList(self.readValue() as! [Any?])
    case 154:
      return PPurchasePending.fromList(self.readValue() as! [Any?])
    case 155:
      return PPurchaseFailed.fromList(self.readValue() as! [Any?])
    case 156:
      return PRestorationRestored.fromList(self.readValue() as! [Any?])
    case 157:
      return PRestorationFailed.fromList(self.readValue() as! [Any?])
    case 158:
      return PRestoreFailed.fromList(self.readValue() as! [Any?])
    case 159:
      return PLogging.fromList(self.readValue() as! [Any?])
    case 160:
      return PPaywallOptions.fromList(self.readValue() as! [Any?])
    case 161:
      return PPurchaseControllerHost.fromList(self.readValue() as! [Any?])
    case 162:
      return PConfigureCompletionHost.fromList(self.readValue() as! [Any?])
    case 163:
      return PPaywallPresentationHandlerHost.fromList(self.readValue() as! [Any?])
    case 164:
      return PFeatureHandlerHost.fromList(self.readValue() as! [Any?])
    case 165:
      return PEntitlement.fromList(self.readValue() as! [Any?])
    case 166:
      return PActive.fromList(self.readValue() as! [Any?])
    case 167:
      return PInactive.fromList(self.readValue() as! [Any?])
    case 168:
      return PUnknown.fromList(self.readValue() as! [Any?])
    case 169:
      return PSuperwallEventInfoPigeon.fromList(self.readValue() as! [Any?])
    case 170:
      return PIdentityOptions.fromList(self.readValue() as! [Any?])
    case 171:
      return PExperiment.fromList(self.readValue() as! [Any?])
    case 172:
      return PPlacementNotFoundTriggerResult.fromList(self.readValue() as! [Any?])
    case 173:
      return PNoAudienceMatchTriggerResult.fromList(self.readValue() as! [Any?])
    case 174:
      return PPaywallTriggerResult.fromList(self.readValue() as! [Any?])
    case 175:
      return PHoldoutTriggerResult.fromList(self.readValue() as! [Any?])
    case 176:
      return PErrorTriggerResult.fromList(self.readValue() as! [Any?])
    case 177:
      return PVariant.fromList(self.readValue() as! [Any?])
    case 178:
      return PConfirmedAssignment.fromList(self.readValue() as! [Any?])
    case 179:
      return PPurchasedPaywallResult.fromList(self.readValue() as! [Any?])
    case 180:
      return PDeclinedPaywallResult.fromList(self.readValue() as! [Any?])
    case 181:
      return PRestoredPaywallResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class SuperwallHostPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PFeatureGatingBehavior {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? PPaywallCloseReason {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? PLocalNotificationType {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? PComputedPropertyRequestType {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? PSurveyShowCondition {
      super.writeByte(133)
      super.writeValue(value.rawValue)
    } else if let value = value as? PNetworkEnvironment {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else if let value = value as? PLogLevel {
      super.writeByte(135)
      super.writeValue(value.rawValue)
    } else if let value = value as? PTransactionBackgroundView {
      super.writeByte(136)
      super.writeValue(value.rawValue)
    } else if let value = value as? PLogScope {
      super.writeByte(137)
      super.writeValue(value.rawValue)
    } else if let value = value as? PConfigurationStatus {
      super.writeByte(138)
      super.writeValue(value.rawValue)
    } else if let value = value as? PEventType {
      super.writeByte(139)
      super.writeValue(value.rawValue)
    } else if let value = value as? PSubscriptionStatusType {
      super.writeByte(140)
      super.writeValue(value.rawValue)
    } else if let value = value as? PPaywallPresentationRequestStatusType {
      super.writeByte(141)
      super.writeValue(value.rawValue)
    } else if let value = value as? PPaywallPresentationRequestStatusReason {
      super.writeByte(142)
      super.writeValue(value.rawValue)
    } else if let value = value as? PVariantType {
      super.writeByte(143)
      super.writeValue(value.rawValue)
    } else if let value = value as? PPaywallSkippedReason {
      super.writeByte(144)
      super.writeValue(value.rawValue)
    } else if let value = value as? PSuperwallOptions {
      super.writeByte(145)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallInfo {
      super.writeByte(146)
      super.writeValue(value.toList())
    } else if let value = value as? PProduct {
      super.writeByte(147)
      super.writeValue(value.toList())
    } else if let value = value as? PLocalNotification {
      super.writeByte(148)
      super.writeValue(value.toList())
    } else if let value = value as? PComputedPropertyRequest {
      super.writeByte(149)
      super.writeValue(value.toList())
    } else if let value = value as? PSurvey {
      super.writeByte(150)
      super.writeValue(value.toList())
    } else if let value = value as? PSurveyOption {
      super.writeByte(151)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchaseCancelled {
      super.writeByte(152)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchasePurchased {
      super.writeByte(153)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchasePending {
      super.writeByte(154)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchaseFailed {
      super.writeByte(155)
      super.writeValue(value.toList())
    } else if let value = value as? PRestorationRestored {
      super.writeByte(156)
      super.writeValue(value.toList())
    } else if let value = value as? PRestorationFailed {
      super.writeByte(157)
      super.writeValue(value.toList())
    } else if let value = value as? PRestoreFailed {
      super.writeByte(158)
      super.writeValue(value.toList())
    } else if let value = value as? PLogging {
      super.writeByte(159)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallOptions {
      super.writeByte(160)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchaseControllerHost {
      super.writeByte(161)
      super.writeValue(value.toList())
    } else if let value = value as? PConfigureCompletionHost {
      super.writeByte(162)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallPresentationHandlerHost {
      super.writeByte(163)
      super.writeValue(value.toList())
    } else if let value = value as? PFeatureHandlerHost {
      super.writeByte(164)
      super.writeValue(value.toList())
    } else if let value = value as? PEntitlement {
      super.writeByte(165)
      super.writeValue(value.toList())
    } else if let value = value as? PActive {
      super.writeByte(166)
      super.writeValue(value.toList())
    } else if let value = value as? PInactive {
      super.writeByte(167)
      super.writeValue(value.toList())
    } else if let value = value as? PUnknown {
      super.writeByte(168)
      super.writeValue(value.toList())
    } else if let value = value as? PSuperwallEventInfoPigeon {
      super.writeByte(169)
      super.writeValue(value.toList())
    } else if let value = value as? PIdentityOptions {
      super.writeByte(170)
      super.writeValue(value.toList())
    } else if let value = value as? PExperiment {
      super.writeByte(171)
      super.writeValue(value.toList())
    } else if let value = value as? PPlacementNotFoundTriggerResult {
      super.writeByte(172)
      super.writeValue(value.toList())
    } else if let value = value as? PNoAudienceMatchTriggerResult {
      super.writeByte(173)
      super.writeValue(value.toList())
    } else if let value = value as? PPaywallTriggerResult {
      super.writeByte(174)
      super.writeValue(value.toList())
    } else if let value = value as? PHoldoutTriggerResult {
      super.writeByte(175)
      super.writeValue(value.toList())
    } else if let value = value as? PErrorTriggerResult {
      super.writeByte(176)
      super.writeValue(value.toList())
    } else if let value = value as? PVariant {
      super.writeByte(177)
      super.writeValue(value.toList())
    } else if let value = value as? PConfirmedAssignment {
      super.writeByte(178)
      super.writeValue(value.toList())
    } else if let value = value as? PPurchasedPaywallResult {
      super.writeByte(179)
      super.writeValue(value.toList())
    } else if let value = value as? PDeclinedPaywallResult {
      super.writeByte(180)
      super.writeValue(value.toList())
    } else if let value = value as? PRestoredPaywallResult {
      super.writeByte(181)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SuperwallHostPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SuperwallHostPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SuperwallHostPigeonCodecWriter(data: data)
  }
}

class SuperwallHostPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = SuperwallHostPigeonCodec(readerWriter: SuperwallHostPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PSuperwallHostApi {
  func configure(apiKey: String, purchaseController: PPurchaseControllerHost?, options: PSuperwallOptions?, completion: PConfigureCompletionHost?, completion: @escaping (Result<Void, Error>) -> Void)
  func reset() throws
  func setDelegate(hasDelegate: Bool) throws
  func confirmAllAssignments(completion: @escaping (Result<[PConfirmedAssignment], Error>) -> Void)
  func getLogLevel() throws -> String
  func setLogLevel(logLevel: String) throws
  func getUserAttributes() throws -> [String: Any]
  func setUserAttributes(userAttributes: [String: Any]) throws
  func getLocaleIdentifier() throws -> String?
  func setLocaleIdentifier(localeIdentifier: String?) throws
  func getUserId() throws -> String
  func getIsLoggedIn() throws -> Bool
  func getIsInitialized() throws -> Bool
  func identify(userId: String, identityOptions: PIdentityOptions?) throws
  func getEntitlements() throws -> [PEntitlement]
  func getSubscriptionStatus() throws -> PSubscriptionStatus
  func setSubscriptionStatus(subscriptionStatus: PSubscriptionStatus) throws
  func getConfigurationStatus() throws -> PConfigurationStatus
  func getIsConfigured() throws -> Bool
  func getIsPaywallPresented() throws -> Bool
  func preloadAllPaywalls() throws
  func preloadPaywallsForPlacements(placementNames: [String]) throws
  func handleDeepLink(url: String) throws -> Bool
  func togglePaywallSpinner(isHidden: Bool) throws
  func getLatestPaywallInfo() throws -> PPaywallInfo?
  func registerPlacement(placement: String, params: [String: Any]?, handler: PPaywallPresentationHandlerHost?, feature: PFeatureHandlerHost?, completion: @escaping (Result<Void, Error>) -> Void)
  func dismiss() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PSuperwallHostApiSetup {
  static var codec: FlutterStandardMessageCodec { SuperwallHostPigeonCodec.shared }
  /// Sets up an instance of `PSuperwallHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PSuperwallHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let configureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.configure\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      configureChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let apiKeyArg = args[0] as! String
        let purchaseControllerArg: PPurchaseControllerHost? = nilOrValue(args[1])
        let optionsArg: PSuperwallOptions? = nilOrValue(args[2])
        let completionArg: PConfigureCompletionHost? = nilOrValue(args[3])
        api.configure(apiKey: apiKeyArg, purchaseController: purchaseControllerArg, options: optionsArg, completion: completionArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      configureChannel.setMessageHandler(nil)
    }
    let resetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.reset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      resetChannel.setMessageHandler { _, reply in
        do {
          try api.reset()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      resetChannel.setMessageHandler(nil)
    }
    let setDelegateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setDelegate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDelegateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let hasDelegateArg = args[0] as! Bool
        do {
          try api.setDelegate(hasDelegate: hasDelegateArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDelegateChannel.setMessageHandler(nil)
    }
    let confirmAllAssignmentsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.confirmAllAssignments\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      confirmAllAssignmentsChannel.setMessageHandler { _, reply in
        api.confirmAllAssignments { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      confirmAllAssignmentsChannel.setMessageHandler(nil)
    }
    let getLogLevelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLogLevel\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLogLevelChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getLogLevel()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLogLevelChannel.setMessageHandler(nil)
    }
    let setLogLevelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLogLevel\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLogLevelChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let logLevelArg = args[0] as! String
        do {
          try api.setLogLevel(logLevel: logLevelArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLogLevelChannel.setMessageHandler(nil)
    }
    let getUserAttributesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserAttributes\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserAttributesChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getUserAttributes()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getUserAttributesChannel.setMessageHandler(nil)
    }
    let setUserAttributesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setUserAttributes\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setUserAttributesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userAttributesArg = args[0] as! [String: Any]
        do {
          try api.setUserAttributes(userAttributes: userAttributesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setUserAttributesChannel.setMessageHandler(nil)
    }
    let getLocaleIdentifierChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLocaleIdentifier\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLocaleIdentifierChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getLocaleIdentifier()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLocaleIdentifierChannel.setMessageHandler(nil)
    }
    let setLocaleIdentifierChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLocaleIdentifier\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLocaleIdentifierChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let localeIdentifierArg: String? = nilOrValue(args[0])
        do {
          try api.setLocaleIdentifier(localeIdentifier: localeIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLocaleIdentifierChannel.setMessageHandler(nil)
    }
    let getUserIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserIdChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getUserId()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getUserIdChannel.setMessageHandler(nil)
    }
    let getIsLoggedInChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsLoggedIn\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIsLoggedInChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getIsLoggedIn()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIsLoggedInChannel.setMessageHandler(nil)
    }
    let getIsInitializedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsInitialized\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIsInitializedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getIsInitialized()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIsInitializedChannel.setMessageHandler(nil)
    }
    let identifyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.identify\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      identifyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg = args[0] as! String
        let identityOptionsArg: PIdentityOptions? = nilOrValue(args[1])
        do {
          try api.identify(userId: userIdArg, identityOptions: identityOptionsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      identifyChannel.setMessageHandler(nil)
    }
    let getEntitlementsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getEntitlements\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getEntitlementsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getEntitlements()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getEntitlementsChannel.setMessageHandler(nil)
    }
    let getSubscriptionStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getSubscriptionStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSubscriptionStatusChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getSubscriptionStatus()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSubscriptionStatusChannel.setMessageHandler(nil)
    }
    let setSubscriptionStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setSubscriptionStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSubscriptionStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let subscriptionStatusArg = args[0] as! PSubscriptionStatus
        do {
          try api.setSubscriptionStatus(subscriptionStatus: subscriptionStatusArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSubscriptionStatusChannel.setMessageHandler(nil)
    }
    let getConfigurationStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getConfigurationStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getConfigurationStatusChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getConfigurationStatus()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getConfigurationStatusChannel.setMessageHandler(nil)
    }
    let getIsConfiguredChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsConfigured\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIsConfiguredChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getIsConfigured()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIsConfiguredChannel.setMessageHandler(nil)
    }
    let getIsPaywallPresentedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsPaywallPresented\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIsPaywallPresentedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getIsPaywallPresented()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIsPaywallPresentedChannel.setMessageHandler(nil)
    }
    let preloadAllPaywallsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadAllPaywalls\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      preloadAllPaywallsChannel.setMessageHandler { _, reply in
        do {
          try api.preloadAllPaywalls()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      preloadAllPaywallsChannel.setMessageHandler(nil)
    }
    let preloadPaywallsForPlacementsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadPaywallsForPlacements\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      preloadPaywallsForPlacementsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let placementNamesArg = args[0] as! [String]
        do {
          try api.preloadPaywallsForPlacements(placementNames: placementNamesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      preloadPaywallsForPlacementsChannel.setMessageHandler(nil)
    }
    let handleDeepLinkChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.handleDeepLink\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      handleDeepLinkChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        do {
          let result = try api.handleDeepLink(url: urlArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      handleDeepLinkChannel.setMessageHandler(nil)
    }
    let togglePaywallSpinnerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.togglePaywallSpinner\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      togglePaywallSpinnerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isHiddenArg = args[0] as! Bool
        do {
          try api.togglePaywallSpinner(isHidden: isHiddenArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      togglePaywallSpinnerChannel.setMessageHandler(nil)
    }
    let getLatestPaywallInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLatestPaywallInfo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLatestPaywallInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getLatestPaywallInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLatestPaywallInfoChannel.setMessageHandler(nil)
    }
    let registerPlacementChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.registerPlacement\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerPlacementChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let placementArg = args[0] as! String
        let paramsArg: [String: Any]? = nilOrValue(args[1])
        let handlerArg: PPaywallPresentationHandlerHost? = nilOrValue(args[2])
        let featureArg: PFeatureHandlerHost? = nilOrValue(args[3])
        api.registerPlacement(placement: placementArg, params: paramsArg, handler: handlerArg, feature: featureArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      registerPlacementChannel.setMessageHandler(nil)
    }
    let dismissChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.dismiss\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      dismissChannel.setMessageHandler { _, reply in
        do {
          try api.dismiss()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      dismissChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PSuperwallDelegateGeneratedProtocol {
  func subscriptionStatusDidChange(from fromArg: PSubscriptionStatus, to toArg: PSubscriptionStatus, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func handleSuperwallEvent(eventInfo eventInfoArg: PSuperwallEventInfoPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func handleCustomPaywallAction(name nameArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func willDismissPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func willPresentPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func didDismissPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func didPresentPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func paywallWillOpenURL(url urlArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func paywallWillOpenDeepLink(url urlArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func handleLog(level levelArg: String, scope scopeArg: String, message messageArg: String?, info infoArg: [String: Any]?, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PSuperwallDelegateGenerated: PSuperwallDelegateGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostPigeonCodec {
    return SuperwallHostPigeonCodec.shared
  }
  func subscriptionStatusDidChange(from fromArg: PSubscriptionStatus, to toArg: PSubscriptionStatus, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([fromArg, toArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func handleSuperwallEvent(eventInfo eventInfoArg: PSuperwallEventInfoPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallEvent\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func handleCustomPaywallAction(name nameArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleCustomPaywallAction\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([nameArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func willDismissPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willDismissPaywall\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func willPresentPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willPresentPaywall\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func didDismissPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didDismissPaywall\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func didPresentPaywall(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didPresentPaywall\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func paywallWillOpenURL(url urlArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenURL\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([urlArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func paywallWillOpenDeepLink(url urlArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenDeepLink\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([urlArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func handleLog(level levelArg: String, scope scopeArg: String, message messageArg: String?, info infoArg: [String: Any]?, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([levelArg, scopeArg, messageArg, infoArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PPurchaseControllerGeneratedProtocol {
  func purchaseFromAppStore(productId productIdArg: String, completion: @escaping (Result<PPurchaseResult, PigeonError>) -> Void)
  func purchaseFromGooglePlay(productId productIdArg: String, basePlanId basePlanIdArg: String?, offerId offerIdArg: String?, completion: @escaping (Result<PPurchaseResult, PigeonError>) -> Void)
  func restorePurchases(completion: @escaping (Result<PRestorationResult, PigeonError>) -> Void)
}
class PPurchaseControllerGenerated: PPurchaseControllerGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostPigeonCodec {
    return SuperwallHostPigeonCodec.shared
  }
  func purchaseFromAppStore(productId productIdArg: String, completion: @escaping (Result<PPurchaseResult, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromAppStore\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([productIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! PPurchaseResult
        completion(.success(result))
      }
    }
  }
  func purchaseFromGooglePlay(productId productIdArg: String, basePlanId basePlanIdArg: String?, offerId offerIdArg: String?, completion: @escaping (Result<PPurchaseResult, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromGooglePlay\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([productIdArg, basePlanIdArg, offerIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! PPurchaseResult
        completion(.success(result))
      }
    }
  }
  func restorePurchases(completion: @escaping (Result<PRestorationResult, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.restorePurchases\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! PRestorationResult
        completion(.success(result))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PConfigureCompletionGeneratedProtocol {
  func onConfigureCompleted(success successArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PConfigureCompletionGenerated: PConfigureCompletionGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostPigeonCodec {
    return SuperwallHostPigeonCodec.shared
  }
  func onConfigureCompleted(success successArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PConfigureCompletionGenerated.onConfigureCompleted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([successArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PPaywallPresentationHandlerGeneratedProtocol {
  func onPresent(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onDismiss(paywallInfo paywallInfoArg: PPaywallInfo, paywallResult paywallResultArg: PPaywallResult, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onError(error errorArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onSkip(reason reasonArg: PPaywallSkippedReason, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PPaywallPresentationHandlerGenerated: PPaywallPresentationHandlerGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostPigeonCodec {
    return SuperwallHostPigeonCodec.shared
  }
  func onPresent(paywallInfo paywallInfoArg: PPaywallInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onPresent\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onDismiss(paywallInfo paywallInfoArg: PPaywallInfo, paywallResult paywallResultArg: PPaywallResult, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onDismiss\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paywallInfoArg, paywallResultArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onError(error errorArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onSkip(reason reasonArg: PPaywallSkippedReason, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PPaywallPresentationHandlerGenerated.onSkip\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([reasonArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PFeatureHandlerGeneratedProtocol {
  func onFeature(id idArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PFeatureHandlerGenerated: PFeatureHandlerGeneratedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SuperwallHostPigeonCodec {
    return SuperwallHostPigeonCodec.shared
  }
  func onFeature(id idArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.superwallkit_flutter.PFeatureHandlerGenerated.onFeature\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
