import 'package:superwallkit_flutter/src/public/PaywallInfo.dart';
import 'package:superwallkit_flutter/src/public/SubscriptionStatus.dart';
import 'package:superwallkit_flutter/superwallkit_flutter.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:superwallkit_flutter/src/generated/superwallhost.g.dart';

/// The delegate protocol that handles Superwall lifecycle events.
///
/// The delegate methods receive callbacks from the SDK in response to certain placements.
///
/// You set this directly using ``Superwall/delegate``.
///
/// To learn how to conform to the delegate in your app and best practices, see
/// [our docs](https://docs.superwall.com/docs/3rd-party-analytics).
abstract class SuperwallDelegate {
  /// Called when the property `subscriptionStatus` of `Superwall` changes.
  void subscriptionStatusDidChange(SubscriptionStatus newValue);

  /// Called whenever an internal analytics placement is tracked.
  void handleSuperwallEvent(SuperwallEventInfo eventInfo);

  /// Called when the user taps an element on your paywall with a custom action.
  void handleCustomPaywallAction(String name);

  /// Called right before the paywall is dismissed.
  void willDismissPaywall(PaywallInfo paywallInfo);

  /// Called right before the paywall is presented.
  void willPresentPaywall(PaywallInfo paywallInfo);

  /// Called right after the paywall is dismissed.
  void didDismissPaywall(PaywallInfo paywallInfo);

  /// Called right after the paywall is presented.
  void didPresentPaywall(PaywallInfo paywallInfo);

  /// Called when the user opens a URL with a specific tag on your paywall.
  void paywallWillOpenURL(Uri url);

  /// Called when the user taps a deep link in your paywall.
  void paywallWillOpenDeepLink(Uri url);

  /// Receive all log messages generated by the SDK.
  void handleLog(String level, String scope, String? message,
      Map<dynamic, dynamic>? info, String? error);
}

class SuperwallDelegateHost implements PSuperwallDelegateGenerated {
  final SuperwallDelegate _delegate;

  SuperwallDelegateHost(this._delegate);

  @override
  void subscriptionStatusDidChange(
      PSubscriptionStatus from, PSubscriptionStatus to) async {
    debugPrint('SuperwallDelegateDart: subscriptionStatusDidChange called');
    final status = await SubscriptionStatus
        .createSubscriptionStatusFromPSubscriptionStatus(to);
    _delegate.subscriptionStatusDidChange(status);
    debugPrint('SuperwallDelegateDart: subscriptionStatusDidChange completed');
  }

  @override
  void handleSuperwallEvent(PSuperwallEventInfo eventInfo) {
    debugPrint(
        'SuperwallDelegateDart: handleSuperwallEvent called with event: ${eventInfo.eventType}');
    final info = SuperwallEventInfo.fromPEventInfo(eventInfo);
    _delegate.handleSuperwallEvent(info);
    debugPrint('SuperwallDelegateDart: handleSuperwallEvent completed');
  }

  @override
  void handleCustomPaywallAction(String name) {
    debugPrint(
        'SuperwallDelegateDart: handleCustomPaywallAction called with name: $name');
    _delegate.handleCustomPaywallAction(name);
    debugPrint('SuperwallDelegateDart: handleCustomPaywallAction completed');
  }

  @override
  void willDismissPaywall(PPaywallInfo paywallInfo) {
    debugPrint('SuperwallDelegateDart: willDismissPaywall called');
    final info = PaywallInfo.fromPigeon(paywallInfo);
    if (info != null) {
      _delegate.willDismissPaywall(info);
      debugPrint('SuperwallDelegateDart: willDismissPaywall completed');
    } else {
      debugPrint(
          'SuperwallDelegateDart: willDismissPaywall skipped - null PaywallInfo');
    }
  }

  @override
  void willPresentPaywall(PPaywallInfo paywallInfo) {
    debugPrint('SuperwallDelegateDart: willPresentPaywall called');
    final info = PaywallInfo.fromPigeon(paywallInfo);
    if (info != null) {
      _delegate.willPresentPaywall(info);
      debugPrint('SuperwallDelegateDart: willPresentPaywall completed');
    } else {
      debugPrint(
          'SuperwallDelegateDart: willPresentPaywall skipped - null PaywallInfo');
    }
  }

  @override
  void didDismissPaywall(PPaywallInfo paywallInfo) {
    debugPrint('SuperwallDelegateDart: didDismissPaywall called');
    final info = PaywallInfo.fromPigeon(paywallInfo);
    if (info != null) {
      _delegate.didDismissPaywall(info);
      debugPrint('SuperwallDelegateDart: didDismissPaywall completed');
    } else {
      debugPrint(
          'SuperwallDelegateDart: didDismissPaywall skipped - null PaywallInfo');
    }
  }

  @override
  void didPresentPaywall(PPaywallInfo paywallInfo) {
    debugPrint('SuperwallDelegateDart: didPresentPaywall called');
    final info = PaywallInfo.fromPigeon(paywallInfo);
    if (info != null) {
      _delegate.didPresentPaywall(info);
      debugPrint('SuperwallDelegateDart: didPresentPaywall completed');
    } else {
      debugPrint(
          'SuperwallDelegateDart: didPresentPaywall skipped - null PaywallInfo');
    }
  }

  @override
  void paywallWillOpenURL(String url) {
    debugPrint(
        'SuperwallDelegateDart: paywallWillOpenURL called with url: $url');
    try {
      final uri = Uri.parse(url);
      _delegate.paywallWillOpenURL(uri);
      debugPrint('SuperwallDelegateDart: paywallWillOpenURL completed');
    } catch (e) {
      debugPrint('SuperwallDelegateDart: Error parsing URL: $e');
    }
  }

  @override
  void paywallWillOpenDeepLink(String url) {
    debugPrint(
        'SuperwallDelegateDart: paywallWillOpenDeepLink called with url: $url');
    try {
      final uri = Uri.parse(url);
      _delegate.paywallWillOpenDeepLink(uri);
      debugPrint('SuperwallDelegateDart: paywallWillOpenDeepLink completed');
    } catch (e) {
      debugPrint('SuperwallDelegateDart: Error parsing deep link URL: $e');
    }
  }

  @override
  void handleLog(String level, String scope, String? message,
      Map<String, Object>? info, String? error) {
    debugPrint(
        'SuperwallDelegateDart: handleLog called with level: $level, scope: $scope');
    _delegate.handleLog(level, scope, message, info, error);
    debugPrint('SuperwallDelegateDart: handleLog completed');
  }
}
