// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    final Iterable<Object?> keys = (a as Map<Object?, Object?>).keys;
    return a.length == b.length && keys.every((Object? key) =>
        (b as Map<Object?, Object?>).containsKey(key) &&
        _deepEquals(a[key], b[key]));
  }
  return a == b;
}
    

enum PNetworkEnvironment {
  release,
  releaseCandidate,
  developer,
}

enum PLogLevel {
  debug,
  info,
  warn,
  error,
  none,
}

enum PTransactionBackgroundView {
  spinner,
  none,
}

enum PLogScope {
  localizationManager,
  bounceButton,
  coreData,
  configManager,
  identityManager,
  debugManager,
  debugViewController,
  localizationViewController,
  gameControllerManager,
  device,
  network,
  paywallEvents,
  productsManager,
  storeKitManager,
  placements,
  receipts,
  superwallCore,
  paywallPresentation,
  transactions,
  paywallViewController,
  cache,
  all,
}

enum PConfigurationStatus {
  pending,
  configured,
  failed,
}

enum PEventType {
  firstSeen,
  appOpen,
  appLaunch,
  identityAlias,
  appInstall,
  restoreStart,
  restoreComplete,
  restoreFail,
  sessionStart,
  deviceAttributes,
  subscriptionStatusDidChange,
  appClose,
  deepLink,
  triggerFire,
  paywallOpen,
  paywallClose,
  paywallDecline,
  transactionStart,
  transactionFail,
  transactionAbandon,
  transactionComplete,
  subscriptionStart,
  freeTrialStart,
  transactionRestore,
  transactionTimeout,
  userAttributes,
  nonRecurringProductPurchase,
  paywallResponseLoadStart,
  paywallResponseLoadNotFound,
  paywallResponseLoadFail,
  paywallResponseLoadComplete,
  paywallWebviewLoadStart,
  paywallWebviewLoadFail,
  paywallWebviewLoadComplete,
  paywallWebviewLoadTimeout,
  paywallWebviewLoadFallback,
  paywallProductsLoadRetry,
  paywallProductsLoadStart,
  paywallProductsLoadFail,
  paywallProductsLoadComplete,
  paywallResourceLoadFail,
  surveyResponse,
  paywallPresentationRequest,
  touchesBegan,
  surveyClose,
  reset,
  configRefresh,
  customPlacement,
  configAttributes,
  confirmAllAssignments,
  configFail,
  adServicesTokenRequestStart,
  adServicesTokenRequestFail,
  adServicesTokenRequestComplete,
  shimmerViewStart,
  shimmerViewComplete,
}

enum PSubscriptionStatusType {
  active,
  inactive,
  unknown,
}

enum PPaywallPresentationRequestStatusType {
  presentation,
  noPresentation,
  timeout,
}

enum PPaywallPresentationRequestStatusReason {
  debuggerPresented,
  paywallAlreadyPresented,
  holdout,
  noAudienceMatch,
  placementNotFound,
  noPaywallViewController,
  noPresenter,
  noConfig,
  subscriptionStatusTimeout,
}

enum PVariantType {
  treatment,
  holdout,
}

class PSuperwallOptions {
  PSuperwallOptions({
    this.paywalls,
    this.networkEnvironment,
    this.isExternalDataCollectionEnabled,
    this.localeIdentifier,
    this.isGameControllerEnabled,
    this.logging,
    this.passIdentifiersToPlayStore,
  });

  PPaywallOptions? paywalls;

  PNetworkEnvironment? networkEnvironment;

  bool? isExternalDataCollectionEnabled;

  String? localeIdentifier;

  bool? isGameControllerEnabled;

  PLogging? logging;

  bool? passIdentifiersToPlayStore;

  List<Object?> _toList() {
    return <Object?>[
      paywalls,
      networkEnvironment,
      isExternalDataCollectionEnabled,
      localeIdentifier,
      isGameControllerEnabled,
      logging,
      passIdentifiersToPlayStore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PSuperwallOptions decode(Object result) {
    result as List<Object?>;
    return PSuperwallOptions(
      paywalls: result[0] as PPaywallOptions?,
      networkEnvironment: result[1] as PNetworkEnvironment?,
      isExternalDataCollectionEnabled: result[2] as bool?,
      localeIdentifier: result[3] as String?,
      isGameControllerEnabled: result[4] as bool?,
      logging: result[5] as PLogging?,
      passIdentifiersToPlayStore: result[6] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PSuperwallOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      paywalls == other.paywalls
      && networkEnvironment == other.networkEnvironment
      && isExternalDataCollectionEnabled == other.isExternalDataCollectionEnabled
      && localeIdentifier == other.localeIdentifier
      && isGameControllerEnabled == other.isGameControllerEnabled
      && logging == other.logging
      && passIdentifiersToPlayStore == other.passIdentifiersToPlayStore;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPaywallInfo {
  PPaywallInfo({
    this.identifier,
    this.name,
    this.experimentBridgeId,
    this.productIds,
    this.products,
    this.url,
    this.presentedByPlacementWithName,
    this.presentedByPlacementWithId,
    this.presentedByPlacementAt,
    this.presentedBy,
    this.presentationSourceType,
    this.responseLoadStartTime,
    this.responseLoadCompleteTime,
    this.responseLoadFailTime,
    this.responseLoadDuration,
    this.webViewLoadStartTime,
    this.webViewLoadCompleteTime,
    this.webViewLoadFailTime,
    this.webViewLoadDuration,
    this.productsLoadStartTime,
    this.productsLoadCompleteTime,
    this.productsLoadFailTime,
    this.productsLoadDuration,
    this.paywalljsVersion,
    this.isFreeTrialAvailable,
    this.featureGatingBehavior,
    this.closeReason,
    this.localNotifications,
    this.computedPropertyRequests,
    this.surveys,
  });

  String? identifier;

  String? name;

  String? experimentBridgeId;

  List<String>? productIds;

  List<Map<String, Object>>? products;

  String? url;

  String? presentedByPlacementWithName;

  String? presentedByPlacementWithId;

  String? presentedByPlacementAt;

  String? presentedBy;

  String? presentationSourceType;

  String? responseLoadStartTime;

  String? responseLoadCompleteTime;

  String? responseLoadFailTime;

  double? responseLoadDuration;

  String? webViewLoadStartTime;

  String? webViewLoadCompleteTime;

  String? webViewLoadFailTime;

  double? webViewLoadDuration;

  String? productsLoadStartTime;

  String? productsLoadCompleteTime;

  String? productsLoadFailTime;

  double? productsLoadDuration;

  String? paywalljsVersion;

  bool? isFreeTrialAvailable;

  Map<String, Object>? featureGatingBehavior;

  Map<String, Object>? closeReason;

  List<Map<String, Object>>? localNotifications;

  List<Map<String, Object>>? computedPropertyRequests;

  List<Map<String, Object>>? surveys;

  List<Object?> _toList() {
    return <Object?>[
      identifier,
      name,
      experimentBridgeId,
      productIds,
      products,
      url,
      presentedByPlacementWithName,
      presentedByPlacementWithId,
      presentedByPlacementAt,
      presentedBy,
      presentationSourceType,
      responseLoadStartTime,
      responseLoadCompleteTime,
      responseLoadFailTime,
      responseLoadDuration,
      webViewLoadStartTime,
      webViewLoadCompleteTime,
      webViewLoadFailTime,
      webViewLoadDuration,
      productsLoadStartTime,
      productsLoadCompleteTime,
      productsLoadFailTime,
      productsLoadDuration,
      paywalljsVersion,
      isFreeTrialAvailable,
      featureGatingBehavior,
      closeReason,
      localNotifications,
      computedPropertyRequests,
      surveys,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaywallInfo decode(Object result) {
    result as List<Object?>;
    return PPaywallInfo(
      identifier: result[0] as String?,
      name: result[1] as String?,
      experimentBridgeId: result[2] as String?,
      productIds: (result[3] as List<Object?>?)?.cast<String>(),
      products: (result[4] as List<Object?>?)?.cast<Map<String, Object>>(),
      url: result[5] as String?,
      presentedByPlacementWithName: result[6] as String?,
      presentedByPlacementWithId: result[7] as String?,
      presentedByPlacementAt: result[8] as String?,
      presentedBy: result[9] as String?,
      presentationSourceType: result[10] as String?,
      responseLoadStartTime: result[11] as String?,
      responseLoadCompleteTime: result[12] as String?,
      responseLoadFailTime: result[13] as String?,
      responseLoadDuration: result[14] as double?,
      webViewLoadStartTime: result[15] as String?,
      webViewLoadCompleteTime: result[16] as String?,
      webViewLoadFailTime: result[17] as String?,
      webViewLoadDuration: result[18] as double?,
      productsLoadStartTime: result[19] as String?,
      productsLoadCompleteTime: result[20] as String?,
      productsLoadFailTime: result[21] as String?,
      productsLoadDuration: result[22] as double?,
      paywalljsVersion: result[23] as String?,
      isFreeTrialAvailable: result[24] as bool?,
      featureGatingBehavior: (result[25] as Map<Object?, Object?>?)?.cast<String, Object>(),
      closeReason: (result[26] as Map<Object?, Object?>?)?.cast<String, Object>(),
      localNotifications: (result[27] as List<Object?>?)?.cast<Map<String, Object>>(),
      computedPropertyRequests: (result[28] as List<Object?>?)?.cast<Map<String, Object>>(),
      surveys: (result[29] as List<Object?>?)?.cast<Map<String, Object>>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaywallInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      identifier == other.identifier
      && name == other.name
      && experimentBridgeId == other.experimentBridgeId
      && _deepEquals(productIds, other.productIds)
      && _deepEquals(products, other.products)
      && url == other.url
      && presentedByPlacementWithName == other.presentedByPlacementWithName
      && presentedByPlacementWithId == other.presentedByPlacementWithId
      && presentedByPlacementAt == other.presentedByPlacementAt
      && presentedBy == other.presentedBy
      && presentationSourceType == other.presentationSourceType
      && responseLoadStartTime == other.responseLoadStartTime
      && responseLoadCompleteTime == other.responseLoadCompleteTime
      && responseLoadFailTime == other.responseLoadFailTime
      && responseLoadDuration == other.responseLoadDuration
      && webViewLoadStartTime == other.webViewLoadStartTime
      && webViewLoadCompleteTime == other.webViewLoadCompleteTime
      && webViewLoadFailTime == other.webViewLoadFailTime
      && webViewLoadDuration == other.webViewLoadDuration
      && productsLoadStartTime == other.productsLoadStartTime
      && productsLoadCompleteTime == other.productsLoadCompleteTime
      && productsLoadFailTime == other.productsLoadFailTime
      && productsLoadDuration == other.productsLoadDuration
      && paywalljsVersion == other.paywalljsVersion
      && isFreeTrialAvailable == other.isFreeTrialAvailable
      && _deepEquals(featureGatingBehavior, other.featureGatingBehavior)
      && _deepEquals(closeReason, other.closeReason)
      && _deepEquals(localNotifications, other.localNotifications)
      && _deepEquals(computedPropertyRequests, other.computedPropertyRequests)
      && _deepEquals(surveys, other.surveys);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PPurchaseResult {
}

class PPurchaseCancelled extends PPurchaseResult {
  PPurchaseCancelled({
    this._ignore,
  });

  bool? _ignore;

  List<Object?> _toList() {
    return <Object?>[
      _ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchaseCancelled decode(Object result) {
    result as List<Object?>;
    return PPurchaseCancelled(
      _ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchaseCancelled || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      _ignore == other._ignore;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPurchasePurchased extends PPurchaseResult {
  PPurchasePurchased({
    this._ignore,
  });

  bool? _ignore;

  List<Object?> _toList() {
    return <Object?>[
      _ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchasePurchased decode(Object result) {
    result as List<Object?>;
    return PPurchasePurchased(
      _ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchasePurchased || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      _ignore == other._ignore;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPurchasePending extends PPurchaseResult {
  PPurchasePending({
    this._ignore,
  });

  bool? _ignore;

  List<Object?> _toList() {
    return <Object?>[
      _ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchasePending decode(Object result) {
    result as List<Object?>;
    return PPurchasePending(
      _ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchasePending || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      _ignore == other._ignore;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPurchaseFailed extends PPurchaseResult {
  PPurchaseFailed({
    this.error,
  });

  String? error;

  List<Object?> _toList() {
    return <Object?>[
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchaseFailed decode(Object result) {
    result as List<Object?>;
    return PPurchaseFailed(
      error: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchaseFailed || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      error == other.error;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PRestorationResult {
}

class PRestorationRestored extends PRestorationResult {
  PRestorationRestored({
    this._ignore,
  });

  bool? _ignore;

  List<Object?> _toList() {
    return <Object?>[
      _ignore,
    ];
  }

  Object encode() {
    return _toList();  }

  static PRestorationRestored decode(Object result) {
    result as List<Object?>;
    return PRestorationRestored(
      _ignore: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PRestorationRestored || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      _ignore == other._ignore;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PRestorationFailed extends PRestorationResult {
  PRestorationFailed({
    this.error,
  });

  String? error;

  List<Object?> _toList() {
    return <Object?>[
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static PRestorationFailed decode(Object result) {
    result as List<Object?>;
    return PRestorationFailed(
      error: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PRestorationFailed || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      error == other.error;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PRestoreFailed {
  PRestoreFailed({
    this.title,
    this.message,
    this.closeButtonTitle,
  });

  String? title;

  String? message;

  String? closeButtonTitle;

  List<Object?> _toList() {
    return <Object?>[
      title,
      message,
      closeButtonTitle,
    ];
  }

  Object encode() {
    return _toList();  }

  static PRestoreFailed decode(Object result) {
    result as List<Object?>;
    return PRestoreFailed(
      title: result[0] as String?,
      message: result[1] as String?,
      closeButtonTitle: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PRestoreFailed || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      title == other.title
      && message == other.message
      && closeButtonTitle == other.closeButtonTitle;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PLogging {
  PLogging({
    this.level,
    this.scopes,
  });

  PLogLevel? level;

  List<PLogScope>? scopes;

  List<Object?> _toList() {
    return <Object?>[
      level,
      scopes,
    ];
  }

  Object encode() {
    return _toList();  }

  static PLogging decode(Object result) {
    result as List<Object?>;
    return PLogging(
      level: result[0] as PLogLevel?,
      scopes: (result[1] as List<Object?>?)?.cast<PLogScope>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PLogging || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      level == other.level
      && _deepEquals(scopes, other.scopes);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPaywallOptions {
  PPaywallOptions({
    this.isHapticFeedbackEnabled,
    this.restoreFailed,
    this.shouldShowPurchaseFailureAlert,
    this.shouldPreload,
    this.automaticallyDismiss,
    this.transactionBackgroundView,
  });

  bool? isHapticFeedbackEnabled;

  PRestoreFailed? restoreFailed;

  bool? shouldShowPurchaseFailureAlert;

  bool? shouldPreload;

  bool? automaticallyDismiss;

  PTransactionBackgroundView? transactionBackgroundView;

  List<Object?> _toList() {
    return <Object?>[
      isHapticFeedbackEnabled,
      restoreFailed,
      shouldShowPurchaseFailureAlert,
      shouldPreload,
      automaticallyDismiss,
      transactionBackgroundView,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaywallOptions decode(Object result) {
    result as List<Object?>;
    return PPaywallOptions(
      isHapticFeedbackEnabled: result[0] as bool?,
      restoreFailed: result[1] as PRestoreFailed?,
      shouldShowPurchaseFailureAlert: result[2] as bool?,
      shouldPreload: result[3] as bool?,
      automaticallyDismiss: result[4] as bool?,
      transactionBackgroundView: result[5] as PTransactionBackgroundView?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaywallOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      isHapticFeedbackEnabled == other.isHapticFeedbackEnabled
      && restoreFailed == other.restoreFailed
      && shouldShowPurchaseFailureAlert == other.shouldShowPurchaseFailureAlert
      && shouldPreload == other.shouldPreload
      && automaticallyDismiss == other.automaticallyDismiss
      && transactionBackgroundView == other.transactionBackgroundView;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPurchaseControllerHost {
  PPurchaseControllerHost({
    this.hostId,
  });

  String? hostId;

  List<Object?> _toList() {
    return <Object?>[
      hostId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPurchaseControllerHost decode(Object result) {
    result as List<Object?>;
    return PPurchaseControllerHost(
      hostId: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPurchaseControllerHost || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      hostId == other.hostId;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PConfigureCompletionHost {
  PConfigureCompletionHost({
    this.hostId,
  });

  String? hostId;

  List<Object?> _toList() {
    return <Object?>[
      hostId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PConfigureCompletionHost decode(Object result) {
    result as List<Object?>;
    return PConfigureCompletionHost(
      hostId: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PConfigureCompletionHost || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      hostId == other.hostId;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PEntitlement {
  PEntitlement({
    this.id,
  });

  String? id;

  List<Object?> _toList() {
    return <Object?>[
      id,
    ];
  }

  Object encode() {
    return _toList();  }

  static PEntitlement decode(Object result) {
    result as List<Object?>;
    return PEntitlement(
      id: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PEntitlement || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class PSubscriptionStatus {
}

class PActive extends PSubscriptionStatus {
  PActive({
    required this.entitlements,
  });

  List<PEntitlement> entitlements;

  List<Object?> _toList() {
    return <Object?>[
      entitlements,
    ];
  }

  Object encode() {
    return _toList();  }

  static PActive decode(Object result) {
    result as List<Object?>;
    return PActive(
      entitlements: (result[0] as List<Object?>?)!.cast<PEntitlement>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PActive || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      _deepEquals(entitlements, other.entitlements);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PInactive extends PSubscriptionStatus {
  PInactive({
    this._alwaysFalse,
  });

  bool? _alwaysFalse;

  List<Object?> _toList() {
    return <Object?>[
      _alwaysFalse,
    ];
  }

  Object encode() {
    return _toList();  }

  static PInactive decode(Object result) {
    result as List<Object?>;
    return PInactive(
      _alwaysFalse: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PInactive || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      _alwaysFalse == other._alwaysFalse;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PUnknown extends PSubscriptionStatus {
  PUnknown({
    this._alwaysFalse,
  });

  bool? _alwaysFalse;

  List<Object?> _toList() {
    return <Object?>[
      _alwaysFalse,
    ];
  }

  Object encode() {
    return _toList();  }

  static PUnknown decode(Object result) {
    result as List<Object?>;
    return PUnknown(
      _alwaysFalse: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PUnknown || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      _alwaysFalse == other._alwaysFalse;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PPaywallInfoPigeon {
  PPaywallInfoPigeon({
    required this.identifier,
    required this.name,
    this.experimentBridgeId,
    required this.productIds,
    required this.products,
    required this.url,
    this.presentedByEventWithName,
    this.presentedByEventWithId,
    this.presentedByEventAt,
    this.presentedBy,
    this.presentationSourceType,
    this.responseLoadStartTime,
    this.responseLoadCompleteTime,
    this.responseLoadFailTime,
    this.responseLoadDuration,
    this.webViewLoadStartTime,
    this.webViewLoadCompleteTime,
    this.webViewLoadFailTime,
    this.webViewLoadDuration,
    this.productsLoadStartTime,
    this.productsLoadCompleteTime,
    this.productsLoadFailTime,
    this.productsLoadDuration,
    this.paywalljsVersion,
    this.isFreeTrialAvailable,
    this.featureGatingBehavior,
    this.closeReason,
    this.localNotifications,
    this.computedPropertyRequests,
    this.surveys,
  });

  String identifier;

  String name;

  String? experimentBridgeId;

  List<String> productIds;

  List<Map<String, Object>> products;

  String url;

  String? presentedByEventWithName;

  String? presentedByEventWithId;

  double? presentedByEventAt;

  String? presentedBy;

  String? presentationSourceType;

  double? responseLoadStartTime;

  double? responseLoadCompleteTime;

  double? responseLoadFailTime;

  double? responseLoadDuration;

  double? webViewLoadStartTime;

  double? webViewLoadCompleteTime;

  double? webViewLoadFailTime;

  double? webViewLoadDuration;

  double? productsLoadStartTime;

  double? productsLoadCompleteTime;

  double? productsLoadFailTime;

  double? productsLoadDuration;

  String? paywalljsVersion;

  bool? isFreeTrialAvailable;

  Map<String, Object>? featureGatingBehavior;

  Map<String, Object>? closeReason;

  List<Map<String, Object>>? localNotifications;

  List<Map<String, Object>>? computedPropertyRequests;

  List<Map<String, Object>>? surveys;

  List<Object?> _toList() {
    return <Object?>[
      identifier,
      name,
      experimentBridgeId,
      productIds,
      products,
      url,
      presentedByEventWithName,
      presentedByEventWithId,
      presentedByEventAt,
      presentedBy,
      presentationSourceType,
      responseLoadStartTime,
      responseLoadCompleteTime,
      responseLoadFailTime,
      responseLoadDuration,
      webViewLoadStartTime,
      webViewLoadCompleteTime,
      webViewLoadFailTime,
      webViewLoadDuration,
      productsLoadStartTime,
      productsLoadCompleteTime,
      productsLoadFailTime,
      productsLoadDuration,
      paywalljsVersion,
      isFreeTrialAvailable,
      featureGatingBehavior,
      closeReason,
      localNotifications,
      computedPropertyRequests,
      surveys,
    ];
  }

  Object encode() {
    return _toList();  }

  static PPaywallInfoPigeon decode(Object result) {
    result as List<Object?>;
    return PPaywallInfoPigeon(
      identifier: result[0]! as String,
      name: result[1]! as String,
      experimentBridgeId: result[2] as String?,
      productIds: (result[3] as List<Object?>?)!.cast<String>(),
      products: (result[4] as List<Object?>?)!.cast<Map<String, Object>>(),
      url: result[5]! as String,
      presentedByEventWithName: result[6] as String?,
      presentedByEventWithId: result[7] as String?,
      presentedByEventAt: result[8] as double?,
      presentedBy: result[9] as String?,
      presentationSourceType: result[10] as String?,
      responseLoadStartTime: result[11] as double?,
      responseLoadCompleteTime: result[12] as double?,
      responseLoadFailTime: result[13] as double?,
      responseLoadDuration: result[14] as double?,
      webViewLoadStartTime: result[15] as double?,
      webViewLoadCompleteTime: result[16] as double?,
      webViewLoadFailTime: result[17] as double?,
      webViewLoadDuration: result[18] as double?,
      productsLoadStartTime: result[19] as double?,
      productsLoadCompleteTime: result[20] as double?,
      productsLoadFailTime: result[21] as double?,
      productsLoadDuration: result[22] as double?,
      paywalljsVersion: result[23] as String?,
      isFreeTrialAvailable: result[24] as bool?,
      featureGatingBehavior: (result[25] as Map<Object?, Object?>?)?.cast<String, Object>(),
      closeReason: (result[26] as Map<Object?, Object?>?)?.cast<String, Object>(),
      localNotifications: (result[27] as List<Object?>?)?.cast<Map<String, Object>>(),
      computedPropertyRequests: (result[28] as List<Object?>?)?.cast<Map<String, Object>>(),
      surveys: (result[29] as List<Object?>?)?.cast<Map<String, Object>>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PPaywallInfoPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      identifier == other.identifier
      && name == other.name
      && experimentBridgeId == other.experimentBridgeId
      && _deepEquals(productIds, other.productIds)
      && _deepEquals(products, other.products)
      && url == other.url
      && presentedByEventWithName == other.presentedByEventWithName
      && presentedByEventWithId == other.presentedByEventWithId
      && presentedByEventAt == other.presentedByEventAt
      && presentedBy == other.presentedBy
      && presentationSourceType == other.presentationSourceType
      && responseLoadStartTime == other.responseLoadStartTime
      && responseLoadCompleteTime == other.responseLoadCompleteTime
      && responseLoadFailTime == other.responseLoadFailTime
      && responseLoadDuration == other.responseLoadDuration
      && webViewLoadStartTime == other.webViewLoadStartTime
      && webViewLoadCompleteTime == other.webViewLoadCompleteTime
      && webViewLoadFailTime == other.webViewLoadFailTime
      && webViewLoadDuration == other.webViewLoadDuration
      && productsLoadStartTime == other.productsLoadStartTime
      && productsLoadCompleteTime == other.productsLoadCompleteTime
      && productsLoadFailTime == other.productsLoadFailTime
      && productsLoadDuration == other.productsLoadDuration
      && paywalljsVersion == other.paywalljsVersion
      && isFreeTrialAvailable == other.isFreeTrialAvailable
      && _deepEquals(featureGatingBehavior, other.featureGatingBehavior)
      && _deepEquals(closeReason, other.closeReason)
      && _deepEquals(localNotifications, other.localNotifications)
      && _deepEquals(computedPropertyRequests, other.computedPropertyRequests)
      && _deepEquals(surveys, other.surveys);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PSuperwallEventInfoPigeon {
  PSuperwallEventInfoPigeon({
    required this.eventType,
    this.params,
    this.paywallInfoBridgeId,
  });

  PEventType eventType;

  Map<String, Object>? params;

  String? paywallInfoBridgeId;

  List<Object?> _toList() {
    return <Object?>[
      eventType,
      params,
      paywallInfoBridgeId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PSuperwallEventInfoPigeon decode(Object result) {
    result as List<Object?>;
    return PSuperwallEventInfoPigeon(
      eventType: result[0]! as PEventType,
      params: (result[1] as Map<Object?, Object?>?)?.cast<String, Object>(),
      paywallInfoBridgeId: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PSuperwallEventInfoPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      eventType == other.eventType
      && _deepEquals(params, other.params)
      && paywallInfoBridgeId == other.paywallInfoBridgeId;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PIdentityOptions {
  PIdentityOptions({
    this.restorePaywallAssignments,
  });

  bool? restorePaywallAssignments;

  List<Object?> _toList() {
    return <Object?>[
      restorePaywallAssignments,
    ];
  }

  Object encode() {
    return _toList();  }

  static PIdentityOptions decode(Object result) {
    result as List<Object?>;
    return PIdentityOptions(
      restorePaywallAssignments: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PIdentityOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      restorePaywallAssignments == other.restorePaywallAssignments;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PExperiment {
  PExperiment({
    required this.id,
    required this.groupId,
    required this.variant,
  });

  String id;

  String groupId;

  PVariant variant;

  List<Object?> _toList() {
    return <Object?>[
      id,
      groupId,
      variant,
    ];
  }

  Object encode() {
    return _toList();  }

  static PExperiment decode(Object result) {
    result as List<Object?>;
    return PExperiment(
      id: result[0]! as String,
      groupId: result[1]! as String,
      variant: result[2]! as PVariant,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PExperiment || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && groupId == other.groupId
      && variant == other.variant;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PVariant {
  PVariant({
    required this.id,
    required this.type,
    this.paywallId,
  });

  String id;

  PVariantType type;

  String? paywallId;

  List<Object?> _toList() {
    return <Object?>[
      id,
      type,
      paywallId,
    ];
  }

  Object encode() {
    return _toList();  }

  static PVariant decode(Object result) {
    result as List<Object?>;
    return PVariant(
      id: result[0]! as String,
      type: result[1]! as PVariantType,
      paywallId: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PVariant || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && type == other.type
      && paywallId == other.paywallId;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PConfirmedAssignment {
  PConfirmedAssignment({
    required this.experimentId,
    required this.variant,
  });

  String experimentId;

  PVariant variant;

  List<Object?> _toList() {
    return <Object?>[
      experimentId,
      variant,
    ];
  }

  Object encode() {
    return _toList();  }

  static PConfirmedAssignment decode(Object result) {
    result as List<Object?>;
    return PConfirmedAssignment(
      experimentId: result[0]! as String,
      variant: result[1]! as PVariant,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PConfirmedAssignment || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      experimentId == other.experimentId
      && variant == other.variant;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is PNetworkEnvironment) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is PLogLevel) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is PTransactionBackgroundView) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is PLogScope) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is PConfigurationStatus) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is PEventType) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is PSubscriptionStatusType) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is PPaywallPresentationRequestStatusType) {
      buffer.putUint8(136);
      writeValue(buffer, value.index);
    }    else if (value is PPaywallPresentationRequestStatusReason) {
      buffer.putUint8(137);
      writeValue(buffer, value.index);
    }    else if (value is PVariantType) {
      buffer.putUint8(138);
      writeValue(buffer, value.index);
    }    else if (value is PSuperwallOptions) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is PPaywallInfo) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchaseCancelled) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchasePurchased) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchasePending) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchaseFailed) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is PRestorationRestored) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is PRestorationFailed) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is PRestoreFailed) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is PLogging) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is PPaywallOptions) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is PPurchaseControllerHost) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is PConfigureCompletionHost) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    }    else if (value is PEntitlement) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    }    else if (value is PActive) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    }    else if (value is PInactive) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    }    else if (value is PUnknown) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    }    else if (value is PPaywallInfoPigeon) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    }    else if (value is PSuperwallEventInfoPigeon) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    }    else if (value is PIdentityOptions) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    }    else if (value is PExperiment) {
      buffer.putUint8(159);
      writeValue(buffer, value.encode());
    }    else if (value is PVariant) {
      buffer.putUint8(160);
      writeValue(buffer, value.encode());
    }    else if (value is PConfirmedAssignment) {
      buffer.putUint8(161);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PNetworkEnvironment.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PLogLevel.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PTransactionBackgroundView.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PLogScope.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PConfigurationStatus.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PEventType.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PSubscriptionStatusType.values[value];
      case 136: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PPaywallPresentationRequestStatusType.values[value];
      case 137: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PPaywallPresentationRequestStatusReason.values[value];
      case 138: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PVariantType.values[value];
      case 139: 
        return PSuperwallOptions.decode(readValue(buffer)!);
      case 140: 
        return PPaywallInfo.decode(readValue(buffer)!);
      case 141: 
        return PPurchaseCancelled.decode(readValue(buffer)!);
      case 142: 
        return PPurchasePurchased.decode(readValue(buffer)!);
      case 143: 
        return PPurchasePending.decode(readValue(buffer)!);
      case 144: 
        return PPurchaseFailed.decode(readValue(buffer)!);
      case 145: 
        return PRestorationRestored.decode(readValue(buffer)!);
      case 146: 
        return PRestorationFailed.decode(readValue(buffer)!);
      case 147: 
        return PRestoreFailed.decode(readValue(buffer)!);
      case 148: 
        return PLogging.decode(readValue(buffer)!);
      case 149: 
        return PPaywallOptions.decode(readValue(buffer)!);
      case 150: 
        return PPurchaseControllerHost.decode(readValue(buffer)!);
      case 151: 
        return PConfigureCompletionHost.decode(readValue(buffer)!);
      case 152: 
        return PEntitlement.decode(readValue(buffer)!);
      case 153: 
        return PActive.decode(readValue(buffer)!);
      case 154: 
        return PInactive.decode(readValue(buffer)!);
      case 155: 
        return PUnknown.decode(readValue(buffer)!);
      case 156: 
        return PPaywallInfoPigeon.decode(readValue(buffer)!);
      case 157: 
        return PSuperwallEventInfoPigeon.decode(readValue(buffer)!);
      case 158: 
        return PIdentityOptions.decode(readValue(buffer)!);
      case 159: 
        return PExperiment.decode(readValue(buffer)!);
      case 160: 
        return PVariant.decode(readValue(buffer)!);
      case 161: 
        return PConfirmedAssignment.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PSuperwallHostApi {
  /// Constructor for [PSuperwallHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PSuperwallHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> configure(String apiKey, {PPurchaseControllerHost? purchaseController, PSuperwallOptions? options, PConfigureCompletionHost? completion, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.configure$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[apiKey, purchaseController, options, completion]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reset() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.reset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setDelegate(bool hasDelegate) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setDelegate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[hasDelegate]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PConfirmedAssignment>> confirmAllAssignments() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.confirmAllAssignments$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PConfirmedAssignment>();
    }
  }

  Future<String> getLogLevel() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLogLevel$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<void> setLogLevel(String logLevel) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLogLevel$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[logLevel]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Map<String, Object>> getUserAttributes() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserAttributes$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<String, Object>();
    }
  }

  Future<void> setUserAttributes(Map<String, Object> userAttributes) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setUserAttributes$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[userAttributes]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String?> getLocaleIdentifier() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLocaleIdentifier$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  Future<void> setLocaleIdentifier(String? localeIdentifier) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setLocaleIdentifier$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[localeIdentifier]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> getUserId() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getUserId$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<bool> getIsLoggedIn() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsLoggedIn$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> getIsInitialized() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsInitialized$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> identify(String userId, PIdentityOptions? identityOptions) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.identify$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[userId, identityOptions]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PEntitlement>> getEntitlements() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getEntitlements$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PEntitlement>();
    }
  }

  Future<PSubscriptionStatus> getSubscriptionStatus() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getSubscriptionStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PSubscriptionStatus?)!;
    }
  }

  Future<void> setSubscriptionStatus(PSubscriptionStatus subscriptionStatus) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.setSubscriptionStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[subscriptionStatus]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PConfigurationStatus> getConfigurationStatus() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getConfigurationStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PConfigurationStatus?)!;
    }
  }

  Future<bool> getIsConfigured() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsConfigured$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> getIsPaywallPresented() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getIsPaywallPresented$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> preloadAllPaywalls() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadAllPaywalls$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> preloadPaywallsForPlacements(List<String> placementNames) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.preloadPaywallsForPlacements$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[placementNames]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> handleDeepLink(String url) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.handleDeepLink$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[url]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> togglePaywallSpinner(bool isHidden) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.togglePaywallSpinner$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[isHidden]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PPaywallInfo?> getLatestPaywallInfo() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.getLatestPaywallInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PPaywallInfo?);
    }
  }

  Future<void> dismiss() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.dismiss$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> registerPlacement(String placement, Map<String, Object>? params) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.superwallkit_flutter.PSuperwallHostApi.registerPlacement$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[placement, params]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class PSuperwallDelegateGenerated {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void subscriptionStatusDidChange(PSubscriptionStatus from, PSubscriptionStatus to);

  void handleSuperwallEvent(PSuperwallEventInfoPigeon eventInfo);

  void handleCustomPaywallAction(String name);

  void willDismissPaywall(PPaywallInfo paywallInfo);

  void willPresentPaywall(PPaywallInfo paywallInfo);

  void didDismissPaywall(PPaywallInfo paywallInfo);

  void didPresentPaywall(PPaywallInfo paywallInfo);

  void paywallWillOpenURL(String url);

  void paywallWillOpenDeepLink(String url);

  void handleLog(String level, String scope, String? message, Map<String, Object>? info, String? error);

  static void setUp(PSuperwallDelegateGenerated? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PSubscriptionStatus? arg_from = (args[0] as PSubscriptionStatus?);
          assert(arg_from != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange was null, expected non-null PSubscriptionStatus.');
          final PSubscriptionStatus? arg_to = (args[1] as PSubscriptionStatus?);
          assert(arg_to != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.subscriptionStatusDidChange was null, expected non-null PSubscriptionStatus.');
          try {
            api.subscriptionStatusDidChange(arg_from!, arg_to!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallEvent$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallEvent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PSuperwallEventInfoPigeon? arg_eventInfo = (args[0] as PSuperwallEventInfoPigeon?);
          assert(arg_eventInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleSuperwallEvent was null, expected non-null PSuperwallEventInfoPigeon.');
          try {
            api.handleSuperwallEvent(arg_eventInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleCustomPaywallAction$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleCustomPaywallAction was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_name = (args[0] as String?);
          assert(arg_name != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleCustomPaywallAction was null, expected non-null String.');
          try {
            api.handleCustomPaywallAction(arg_name!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willDismissPaywall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willDismissPaywall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willDismissPaywall was null, expected non-null PPaywallInfo.');
          try {
            api.willDismissPaywall(arg_paywallInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willPresentPaywall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willPresentPaywall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.willPresentPaywall was null, expected non-null PPaywallInfo.');
          try {
            api.willPresentPaywall(arg_paywallInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didDismissPaywall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didDismissPaywall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didDismissPaywall was null, expected non-null PPaywallInfo.');
          try {
            api.didDismissPaywall(arg_paywallInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didPresentPaywall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didPresentPaywall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PPaywallInfo? arg_paywallInfo = (args[0] as PPaywallInfo?);
          assert(arg_paywallInfo != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.didPresentPaywall was null, expected non-null PPaywallInfo.');
          try {
            api.didPresentPaywall(arg_paywallInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenURL$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenURL was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_url = (args[0] as String?);
          assert(arg_url != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenURL was null, expected non-null String.');
          try {
            api.paywallWillOpenURL(arg_url!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenDeepLink$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenDeepLink was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_url = (args[0] as String?);
          assert(arg_url != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.paywallWillOpenDeepLink was null, expected non-null String.');
          try {
            api.paywallWillOpenDeepLink(arg_url!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_level = (args[0] as String?);
          assert(arg_level != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog was null, expected non-null String.');
          final String? arg_scope = (args[1] as String?);
          assert(arg_scope != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PSuperwallDelegateGenerated.handleLog was null, expected non-null String.');
          final String? arg_message = (args[2] as String?);
          final Map<String, Object>? arg_info = (args[3] as Map<Object?, Object?>?)?.cast<String, Object>();
          final String? arg_error = (args[4] as String?);
          try {
            api.handleLog(arg_level!, arg_scope!, arg_message, arg_info, arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class PPurchaseControllerGenerated {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  PPurchaseResult purchaseFromAppStore(String productId);

  PPurchaseResult purchaseFromGooglePlay(String productId, String? basePlanId, String? offerId);

  PRestorationResult restorePurchases();

  static void setUp(PPurchaseControllerGenerated? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromAppStore$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromAppStore was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_productId = (args[0] as String?);
          assert(arg_productId != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromAppStore was null, expected non-null String.');
          try {
            final PPurchaseResult output = api.purchaseFromAppStore(arg_productId!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromGooglePlay$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromGooglePlay was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_productId = (args[0] as String?);
          assert(arg_productId != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.purchaseFromGooglePlay was null, expected non-null String.');
          final String? arg_basePlanId = (args[1] as String?);
          final String? arg_offerId = (args[2] as String?);
          try {
            final PPurchaseResult output = api.purchaseFromGooglePlay(arg_productId!, arg_basePlanId, arg_offerId);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PPurchaseControllerGenerated.restorePurchases$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final PRestorationResult output = api.restorePurchases();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class PConfigureCompletionGenerated {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onConfigureCompleted(bool success);

  static void setUp(PConfigureCompletionGenerated? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.superwallkit_flutter.PConfigureCompletionGenerated.onConfigureCompleted$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.superwallkit_flutter.PConfigureCompletionGenerated.onConfigureCompleted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_success = (args[0] as bool?);
          assert(arg_success != null,
              'Argument for dev.flutter.pigeon.superwallkit_flutter.PConfigureCompletionGenerated.onConfigureCompleted was null, expected non-null bool.');
          try {
            api.onConfigureCompleted(arg_success!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
